{"ast":null,"code":"import { tsParticles } from \"tsparticles-engine\";\nexport class Particles {\n  static init(options) {\n    const particles = new Particles(),\n      selector = options.selector;\n    if (!selector) {\n      throw new Error(\"No selector provided\");\n    }\n    const el = document.querySelector(selector);\n    if (!el) {\n      throw new Error(\"No element found for selector\");\n    }\n    tsParticles.set(selector.replace(\".\", \"\").replace(\"!\", \"\"), el, {\n      fullScreen: {\n        enable: false\n      },\n      particles: {\n        color: {\n          value: options.color ?? \"!000000\"\n        },\n        links: {\n          color: \"random\",\n          distance: options.minDistance ?? 120,\n          enable: options.connectParticles ?? false\n        },\n        move: {\n          enable: true,\n          speed: options.speed ?? 0.5\n        },\n        number: {\n          value: options.maxParticles ?? 100\n        },\n        size: {\n          value: {\n            min: 1,\n            max: options.sizeVariations ?? 3\n          }\n        }\n      },\n      responsive: options.responsive?.map(responsive => ({\n        maxWidth: responsive.breakpoint,\n        options: {\n          particles: {\n            color: {\n              value: responsive.options?.color\n            },\n            links: {\n              distance: responsive.options?.minDistance,\n              enable: responsive.options?.connectParticles\n            },\n            number: {\n              value: options.maxParticles\n            },\n            move: {\n              enable: true,\n              speed: responsive.options?.speed\n            },\n            size: {\n              value: responsive.options?.sizeVariations\n            }\n          }\n        }\n      }))\n    }).then(container => {\n      particles._container = container;\n    });\n    return particles;\n  }\n  destroy() {\n    const container = this._container;\n    container && container.destroy();\n  }\n  pauseAnimation() {\n    const container = this._container;\n    container && container.pause();\n  }\n  resumeAnimation() {\n    const container = this._container;\n    container && container.play();\n  }\n}","map":{"version":3,"names":["tsParticles","Particles","init","options","particles","selector","Error","el","document","querySelector","set","replace","fullScreen","enable","color","value","links","distance","minDistance","connectParticles","move","speed","number","maxParticles","size","min","max","sizeVariations","responsive","map","maxWidth","breakpoint","then","container","_container","destroy","pauseAnimation","pause","resumeAnimation","play"],"sources":["C:/Users/ADMIN/Desktop/ReactTask/11-4-25/task-tracker/client/node_modules/tsparticles-particles.js/esm/marcbruederlin/Particles.js"],"sourcesContent":["import { tsParticles } from \"tsparticles-engine\";\r\nexport class Particles {\r\n    static init(options) {\r\n        const particles = new Particles(), selector = options.selector;\r\n        if (!selector) {\r\n            throw new Error(\"No selector provided\");\r\n        }\r\n        const el = document.querySelector(selector);\r\n        if (!el) {\r\n            throw new Error(\"No element found for selector\");\r\n        }\r\n        tsParticles\r\n            .set(selector.replace(\".\", \"\").replace(\"!\", \"\"), el, {\r\n            fullScreen: {\r\n                enable: false,\r\n            },\r\n            particles: {\r\n                color: {\r\n                    value: options.color ?? \"!000000\",\r\n                },\r\n                links: {\r\n                    color: \"random\",\r\n                    distance: options.minDistance ?? 120,\r\n                    enable: options.connectParticles ?? false,\r\n                },\r\n                move: {\r\n                    enable: true,\r\n                    speed: options.speed ?? 0.5,\r\n                },\r\n                number: {\r\n                    value: options.maxParticles ?? 100,\r\n                },\r\n                size: {\r\n                    value: { min: 1, max: options.sizeVariations ?? 3 },\r\n                },\r\n            },\r\n            responsive: options.responsive?.map((responsive) => ({\r\n                maxWidth: responsive.breakpoint,\r\n                options: {\r\n                    particles: {\r\n                        color: {\r\n                            value: responsive.options?.color,\r\n                        },\r\n                        links: {\r\n                            distance: responsive.options?.minDistance,\r\n                            enable: responsive.options?.connectParticles,\r\n                        },\r\n                        number: {\r\n                            value: options.maxParticles,\r\n                        },\r\n                        move: {\r\n                            enable: true,\r\n                            speed: responsive.options?.speed,\r\n                        },\r\n                        size: {\r\n                            value: responsive.options?.sizeVariations,\r\n                        },\r\n                    },\r\n                },\r\n            })),\r\n        })\r\n            .then((container) => {\r\n            particles._container = container;\r\n        });\r\n        return particles;\r\n    }\r\n    destroy() {\r\n        const container = this._container;\r\n        container && container.destroy();\r\n    }\r\n    pauseAnimation() {\r\n        const container = this._container;\r\n        container && container.pause();\r\n    }\r\n    resumeAnimation() {\r\n        const container = this._container;\r\n        container && container.play();\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}